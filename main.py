import logging
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
)
from config import BOT_TOKEN
from handlers.commands import start_command, support_command
from handlers.feedback import handle_feedback_message
from handlers.questions import handle_user_message
from handlers.settings import get_settings_handlers
from handlers.admin import get_admin_handlers, get_admin_block_handlers

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

app = ApplicationBuilder().token(BOT_TOKEN).build()

app.add_handler(CommandHandler("start", start_command))
app.add_handler(CommandHandler("support", support_command))

for handler in get_settings_handlers():
    app.add_handler(handler)

for handler in get_admin_handlers():
    app.add_handler(handler)
for handler in get_admin_block_handlers():
    app.add_handler(handler)

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
async def message_dispatcher(update, context):
    if update.message and update.message.text:
        logging.info(f"[DEBUG] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: '{update.message.text}'")
    else:
        logging.info("[DEBUG] –ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –≤ update.message")
    if context.user_data.get("feedback_mode"):
        await handle_feedback_message(update, context)
    else:
        await handle_user_message(update, context)

app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_dispatcher))

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–∫–∂–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
# async def all_updates(update, context):
#     logging.info(f"[DEBUG] Update: {update}")
# app.add_handler(MessageHandler(filters.ALL, all_updates))

logging.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
app.run_polling()
