import json
import random
import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
from config import QUESTIONS_FILE
from keyboards import get_main_keyboard
from utils.tts import generate_voice

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –≤–æ–ø—Ä–æ—Å–æ–≤
try:
    with open(QUESTIONS_FILE, encoding="utf-8") as f:
        QUESTIONS = json.load(f)
except Exception as e:
    logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")
    QUESTIONS = []

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_data = {}

def get_user_data(user_id):
    if user_id not in user_data:
        user_data[user_id] = {
            "easy_done": [],
            "hard_done": [],
            "last_question": None,
            "language": "en",
            "auto_repeat": False,
            "answer_display_count": 0,
            "q_translate_count": 0,
            "a_translate_count": 0,
            "level": "easy"
        }
    return user_data[user_id]

async def handle_user_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤ —Ç–æ–º —á–∏—Å–ª–µ –∫–Ω–æ–ø–∫–∏ –∏–∑ Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
    """
    msg = update.message.text.strip().lower()
    logging.info(f"[DEBUG] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: '{msg}'")
    
    user_id = update.effective_user.id
    data = get_user_data(user_id)
    lang = data.get("language", "en")
    level = data.get("level", "easy")

    # –û–∂–∏–¥–∞–µ–º—ã–µ —Ç–µ–∫—Å—Ç—ã –∫–Ω–æ–ø–æ–∫
    btn_next    = "‚úàÔ∏è —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å" if lang == "ru" else "‚úàÔ∏è next question"
    btn_answer  = "üí¨ –æ—Ç–≤–µ—Ç" if lang == "ru" else "üí¨ answer"
    btn_q_trans = "üåç –ø–µ—Ä–µ–≤–æ–¥ –≤–æ–ø—Ä–æ—Å–∞" if lang == "ru" else "üåç translate question"
    btn_a_trans = "üá∑üá∫ –ø–µ—Ä–µ–≤–æ–¥ –æ—Ç–≤–µ—Ç–∞" if lang == "ru" else "üá∑üá∫ translate answer"
    btn_support = "üí≥ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç" if lang == "ru" else "üí≥ support project"

    # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –≤–∞—à–µ–π –ª–æ–≥–∏–∫–µ ‚Äì –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ msg –ø–æ–¥—Å—Ç—Ä–æ–∫—É
    if btn_support in msg:
        # ...
        return

    if btn_next in msg:
        # ...
        return

    if btn_answer in msg:
        # ...
        return

    if btn_q_trans in msg:
        # ...
        return

    if btn_a_trans in msg:
        # ...
        return

    # –ï—Å–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–ª–æ ‚Äì –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–Ω–æ–ø–∫–∞–º–∏
    await update.message.reply_text("‚ùì –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é." if lang == "ru" else "‚ùì Please use the menu buttons.")


# === –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø –¥–ª—è –æ–±—Ä–∞–±–æ–∫–∏ inline‚Äë–∫–æ–ª–±—ç–∫–æ–≤ switch_to_hard –∏ reset_progress ===
async def handle_questions_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∫–æ–ª–±—ç–∫–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏:
    - switch_to_hard (–ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–æ–∂–Ω—ã–º –≤–æ–ø—Ä–æ—Å–∞–º)
    - reset_progress (—Å–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å)
    """
    query = update.callback_query
    user_id = query.from_user.id
    data = get_user_data(user_id)

    await query.answer()

    lang = data.get("language", "en")

    if query.data == "switch_to_hard":
        data["level"] = "hard"
        context.user_data["level"] = "hard"
        text = "–¢–µ–ø–µ—Ä—å –±—É–¥—É—Ç —Å–ª–æ–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã!" if lang == "ru" else "Now you're in hard question mode!"
        await query.edit_message_text(text)
        # –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:
        # await query.message.reply_text("...")

    elif query.data == "reset_progress":
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        data["easy_done"] = []
        data["hard_done"] = []
        data["last_question"] = None
        data["answer_display_count"] = 0
        data["q_translate_count"] = 0
        data["a_translate_count"] = 0
        data["level"] = "easy"
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        text = "–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–±—Ä–æ—à–µ–Ω, –≤–æ–∑–≤—Ä–∞—Ç –∫ –ª—ë–≥–∫–∏–º –≤–æ–ø—Ä–æ—Å–∞–º" if lang == "ru" else "Progress reset, back to easy questions"
        await query.edit_message_text(text)
