import json
import random
import logging
from telegram import Update
from telegram.ext import ContextTypes
from config import QUESTIONS_FILE
from keyboards import get_main_keyboard
from utils.tts import generate_voice

# –ó–∞–≥—Ä—É–∑–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
try:
    with open(QUESTIONS_FILE, encoding="utf-8") as f:
        QUESTIONS = json.load(f)
except Exception as e:
    logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")
    QUESTIONS = []

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

def get_user_data(user_id):
    if user_id not in user_data:
        user_data[user_id] = {
            "easy_done": [],
            "hard_done": [],
            "last_question": None,
            "language": "en",
            "auto_repeat": False,
        }
    return user_data[user_id]

async def handle_user_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    msg = update.message.text.strip()
    data = get_user_data(user_id)

    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –Ω–æ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤ –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π.
    lang = context.user_data.get("language", data.get("language", "en"))
    level = context.user_data.get("level", "easy")
    data["language"] = lang
    context.user_data["language"] = lang

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ—Ç–æ–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ (–ø—Ä–∏ —ç—Ç–æ–º –∫–Ω–æ–ø–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è —Å–æ–≥–ª–∞—Å–Ω–æ —è–∑—ã–∫—É –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞)
    btn_next = "‚úàÔ∏è –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å" if lang == "ru" else "‚úàÔ∏è Next question"
    btn_answer = "üí¨ –û—Ç–≤–µ—Ç" if lang == "ru" else "üí¨ Answer"
    btn_q_trans = "üåç –ü–µ—Ä–µ–≤–æ–¥ –≤–æ–ø—Ä–æ—Å–∞" if lang == "ru" else "üåç Translate question"
    btn_a_trans = "üá∑üá∫ –ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–≤–µ—Ç–∞" if lang == "ru" else "üá∑üá∫ Translate answer"

    logging.info(f"[USER {user_id}] –°–æ–æ–±—â–µ–Ω–∏–µ: {msg} | –Ø–∑—ã–∫: {lang} | –£—Ä–æ–≤–µ–Ω—å: {level}")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å"
    if msg == btn_next:
        available = [q for q in QUESTIONS if q["level"] == level and q["id"] not in data[f"{level}_done"]]
        if not available:
            if level == "easy":
                context.user_data["level"] = "hard"
                await update.message.reply_text(
                    "üéâ –í—ã –ø—Ä–æ—à–ª–∏ –≤—Å–µ –ø—Ä–æ—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã. –ü–µ—Ä–µ—Ö–æ–∂—É –∫ —Å–ª–æ–∂–Ω—ã–º!" if lang == "ru"
                    else "üéâ All easy questions done. Switching to hard questions!"
                )
            else:
                await update.message.reply_text(
                    "‚úÖ –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã. –•–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞?" if lang == "ru"
                    else "‚úÖ All questions completed. Want to start over?"
                )
            return

        question = random.choice(available)
        data[f"{level}_done"].append(question["id"])
        data["last_question"] = question

        # –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —è–∑—ã–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        await update.message.reply_text(f"üìù {question['question_en']}")
        voice = generate_voice(question['question_en'])
        if voice:
            await update.message.reply_voice(voice)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Ç–≤–µ—Ç"
    if msg == btn_answer:
        q = data.get("last_question")
        if not q:
            await update.message.reply_text("‚ùó –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å." if lang == "ru" else "‚ùó Please select a question first.")
            return
        # –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —è–∑—ã–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        await update.message.reply_text(f"‚úÖ {q['answer_en']}")
        voice = generate_voice(q['answer_en'])
        if voice:
            await update.message.reply_voice(voice)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–µ—Ä–µ–≤–æ–¥ –≤–æ–ø—Ä–æ—Å–∞" (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä—É—Å—Å–∫–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –≤–æ–ø—Ä–æ—Å–∞)
    if msg == btn_q_trans:
        q = data.get("last_question")
        if not q:
            await update.message.reply_text("‚ùó –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å." if lang == "ru" else "‚ùó Please select a question first.")
            return
        await update.message.reply_text(f"üåç {q['question_ru']}")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–≤–µ—Ç–∞" (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä—É—Å—Å–∫–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞)
    if msg == btn_a_trans:
        q = data.get("last_question")
        if not q:
            await update.message.reply_text("‚ùó –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å." if lang == "ru" else "‚ùó Please select a question first.")
            return
        await update.message.reply_text(f"üá∑üá∫ {q['answer_ru']}")
        return

    await update.message.reply_text("‚ùì –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é." if lang == "ru" else "‚ùì Please use the menu buttons.")
