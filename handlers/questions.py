import json
import random
import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
from config import QUESTIONS_FILE
from keyboards import get_main_keyboard
from utils.tts import generate_voice

# –ó–∞–≥—Ä—É–∑–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
try:
    with open(QUESTIONS_FILE, encoding="utf-8") as f:
        QUESTIONS = json.load(f)
except Exception as e:
    logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")
    QUESTIONS = []

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

def get_user_data(user_id):
    if user_id not in user_data:
        user_data[user_id] = {
            "easy_done": [],
            "hard_done": [],
            "last_question": None,
            "language": "en",
            "auto_repeat": False,
            # –°—á—ë—Ç—á–∏–∫–∏ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞/–æ—Ç–≤–µ—Ç–∞:
            "current_q_trans": 0,  # –î–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–µ—Ä–µ–≤–æ–¥ –≤–æ–ø—Ä–æ—Å–∞"
            "current_a_trans": 0,  # –î–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–≤–µ—Ç–∞"
        }
    return user_data[user_id]

async def handle_user_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    msg = update.message.text.strip()
    data = get_user_data(user_id)

    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞) –∏ —É—Ä–æ–≤–µ–Ω—å –≤–æ–ø—Ä–æ—Å–æ–≤
    lang = context.user_data.get("language", data.get("language", "en"))
    level = context.user_data.get("level", "easy")
    data["language"] = lang
    context.user_data["language"] = lang

    # –¢–µ–∫—Å—Ç—ã –∫–Ω–æ–ø–æ–∫ –∑–∞–≤–∏—Å—è—Ç –æ—Ç —è–∑—ã–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    btn_next    = "‚úàÔ∏è –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å" if lang == "ru" else "‚úàÔ∏è Next question"
    btn_answer  = "üí¨ –û—Ç–≤–µ—Ç"             if lang == "ru" else "üí¨ Answer"
    btn_q_trans = "üåç –ü–µ—Ä–µ–≤–æ–¥ –≤–æ–ø—Ä–æ—Å–∞"     if lang == "ru" else "üåç Translate question"
    btn_a_trans = "üá∑üá∫ –ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–≤–µ—Ç–∞"     if lang == "ru" else "üá∑üá∫ Translate answer"

    logging.info(f"[USER {user_id}] –°–æ–æ–±—â–µ–Ω–∏–µ: {msg} | –Ø–∑—ã–∫: {lang} | –£—Ä–æ–≤–µ–Ω—å: {level}")

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å" ---
    if msg == btn_next:
        available = [q for q in QUESTIONS if q["level"] == level and q["id"] not in data[f"{level}_done"]]
        if not available:
            # –ï—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å easy –∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç ‚Äì –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞:
            if level == "easy":
                keyboard = InlineKeyboardMarkup([
                    [InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–æ–∂–Ω—ã–º", callback_data="switch_to_hard"),
                     InlineKeyboardButton("–ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞", callback_data="reset_progress")]
                ])
                await update.message.reply_text(
                    "‚úÖ –í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤—Å–µ –ø—Ä–æ—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã. –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
                    reply_markup=keyboard
                )
            else:
                keyboard = InlineKeyboardMarkup([
                    [InlineKeyboardButton("–ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞", callback_data="reset_progress")]
                ])
                await update.message.reply_text(
                    "‚úÖ –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã. –•–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞?",
                    reply_markup=keyboard
                )
            return

        question = random.choice(available)
        data[f"{level}_done"].append(question["id"])
        data["last_question"] = question
        # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–æ–≤ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:
        data["current_q_trans"] = 0
        data["current_a_trans"] = 0

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
        await update.message.reply_text(f"üìù {question['question_en']}")
        voice = generate_voice(question['question_en'])
        if voice:
            await update.message.reply_voice(voice)
        return

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Ç–≤–µ—Ç" ---
    if msg == btn_answer:
        q = data.get("last_question")
        if not q:
            await update.message.reply_text(
                "‚ùó –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å." if lang == "ru"
                else "‚ùó Please select a question first."
            )
            return
        await update.message.reply_text(f"‚úÖ {q['answer_en']}")
        voice = generate_voice(q['answer_en'])
        if voice:
            await update.message.reply_voice(voice)
        return

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–µ—Ä–µ–≤–æ–¥ –≤–æ–ø—Ä–æ—Å–∞" ---
    if msg == btn_q_trans:
        q = data.get("last_question")
        if not q:
            await update.message.reply_text(
                "‚ùó –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å." if lang == "ru"
                else "‚ùó Please select a question first."
            )
            return
        if data.get("current_q_trans", 0) == 0:
            # –ü–µ—Ä–≤—ã–π —Ä–∞–∑ ‚Äì –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥ –≤–æ–ø—Ä–æ—Å–∞
            data["current_q_trans"] = 1
            await update.message.reply_text(f"üåç {q['question_ru']}")
        elif data["current_q_trans"] == 1:
            # –í—Ç–æ—Ä–æ–π —Ä–∞–∑ ‚Äì —Å–æ–æ–±—â–∞–µ–º, —á—Ç–æ –≤–æ–ø—Ä–æ—Å —É–∂–µ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω
            data["current_q_trans"] = 2
            await update.message.reply_text("–í–æ–ø—Ä–æ—Å —É–∂–µ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω" if lang == "ru" else "Question already translated")
        else:
            # –¢—Ä–µ—Ç–∏–π –∏ –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ —Ä–∞–∑—ã ‚Äì –Ω–µ –æ—Ç–≤–µ—á–∞–µ–º
            return
        return

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–≤–µ—Ç–∞" ---
    if msg == btn_a_trans:
        q = data.get("last_question")
        if not q:
            await update.message.reply_text(
                "‚ùó –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å." if lang == "ru"
                else "‚ùó Please select a question first."
            )
            return
        if data.get("current_a_trans", 0) == 0:
            data["current_a_trans"] = 1
            await update.message.reply_text(f"üá∑üá∫ {q['answer_ru']}")
        elif data["current_a_trans"] == 1:
            data["current_a_trans"] = 2
            await update.message.reply_text("–û—Ç–≤–µ—Ç —É–∂–µ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω" if lang == "ru" else "Answer already translated")
        else:
            return
        return

    await update.message.reply_text(
        "‚ùì –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é." if lang == "ru" else "‚ùì Please use the menu buttons."
    )
