import json
import random
import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
from config import QUESTIONS_FILE, ADMIN_ID
from keyboards import get_main_keyboard
from utils.tts import generate_voice

# –ó–∞–≥—Ä—É–∑–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
try:
    with open(QUESTIONS_FILE, encoding="utf-8") as f:
        QUESTIONS = json.load(f)
except Exception as e:
    logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")
    QUESTIONS = []

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
user_data = {}

def get_user_data(user_id):
    if user_id not in user_data:
        user_data[user_id] = {
            "easy_done": [],
            "hard_done": [],
            "last_question": None,
            "language": "en",
            "auto_repeat": False,
            "answer_display_count": 0,
            "q_translate_count": 0,
            "a_translate_count": 0
        }
    return user_data[user_id]

async def handle_user_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    msg = update.message.text.strip()
    data = get_user_data(user_id)

    lang = context.user_data.get("language", data.get("language", "en"))
    level = context.user_data.get("level", "easy")
    data["language"] = lang
    context.user_data["language"] = lang

    # –ö–Ω–æ–ø–∫–∏
    btn_next    = "‚úàÔ∏è –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å" if lang == "ru" else "‚úàÔ∏è Next question"
    btn_answer  = "üí¨ –û—Ç–≤–µ—Ç" if lang == "ru" else "üí¨ Answer"
    btn_q_trans = "üåç –ü–µ—Ä–µ–≤–æ–¥ –≤–æ–ø—Ä–æ—Å–∞" if lang == "ru" else "üåç Translate question"
    btn_a_trans = "üá∑üá∫ –ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–≤–µ—Ç–∞" if lang == "ru" else "üá∑üá∫ Translate answer"
    btn_support = "üí≥ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç" if lang == "ru" else "üí≥ Support project"

    # üë®‚Äçüíª –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
    if user_id == ADMIN_ID and msg in ["üõ†Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", "üõ†Ô∏è Admin Control"]:
        inline_keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("1", callback_data="admin_1"), InlineKeyboardButton("2", callback_data="admin_2")],
            [InlineKeyboardButton("3", callback_data="admin_3"), InlineKeyboardButton("4", callback_data="admin_4")],
            [InlineKeyboardButton("5", callback_data="admin_5")]
        ])
        prompt = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:" if lang == "ru" else "Choose an action:"
        await update.message.reply_text(prompt, reply_markup=inline_keyboard)
        return

    # üí≥ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç ‚Äî —Ç–µ–ø–µ—Ä—å –≤—ã–∑—ã–≤–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–º–µ–Ω—é –∏–∑ commands.py
    if msg == btn_support:
        from handlers.commands import support_command
        await support_command(update, context)
        return

    # ‚úàÔ∏è –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    if msg == btn_next:
        available = [q for q in QUESTIONS if q["level"] == level and q["id"] not in data[f"{level}_done"]]
        if not available:
            if level == "easy":
                button1 = "–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–æ–∂–Ω—ã–º" if lang == "ru" else "Switch to hard"
                button2 = "–ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞" if lang == "ru" else "Start over"
                prompt = "‚úÖ –í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤—Å–µ –ø—Ä–æ—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã. –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?" if lang == "ru" else "‚úÖ All easy questions done. Choose next step:"
                keyboard = InlineKeyboardMarkup([
                    [InlineKeyboardButton(button1, callback_data="switch_to_hard"),
                     InlineKeyboardButton(button2, callback_data="reset_progress")]
                ])
            else:
                button = "–ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞" if lang == "ru" else "Start over"
                prompt = "‚úÖ –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã. –•–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞?" if lang == "ru" else "‚úÖ All questions completed. Start over?"
                keyboard = InlineKeyboardMarkup([[InlineKeyboardButton(button, callback_data="reset_progress")]])
            await update.message.reply_text(prompt, reply_markup=keyboard)
            return

        question = random.choice(available)
        data[f"{level}_done"].append(question["id"])
        data["last_question"] = question
        data["answer_display_count"] = 0
        data["q_translate_count"] = 0
        data["a_translate_count"] = 0

        await update.message.reply_text(f"üìù {question['question_en']}")
        voice = generate_voice(question['question_en'])
        if voice:
            await update.message.reply_voice(voice)
        return

    # üí¨ –û—Ç–≤–µ—Ç
    if msg == btn_answer:
        q = data.get("last_question")
        if not q:
            await update.message.reply_text("‚ùó –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å." if lang == "ru" else "‚ùó Please select a question first.")
            return
        if data["answer_display_count"] == 0:
            await update.message.reply_text(f"‚úÖ {q['answer_en']}")
            voice = generate_voice(q['answer_en'])
            if voice:
                await update.message.reply_voice(voice)
            data["answer_display_count"] = 1
        else:
            await update.message.reply_text("‚ùó –û—Ç–≤–µ—Ç —É–∂–µ –ø–æ–ª—É—á–µ–Ω." if lang == "ru" else "‚ùó Answer already shown.")
        return

    # üåç –ü–µ—Ä–µ–≤–æ–¥ –≤–æ–ø—Ä–æ—Å–∞
    if msg == btn_q_trans:
        q = data.get("last_question")
        if not q:
            await update.message.reply_text("‚ùó –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å." if lang == "ru" else "‚ùó Please select a question first.")
            return
        if data["q_translate_count"] == 0:
            await update.message.reply_text(f"üåç {q['question_ru']}")
            data["q_translate_count"] = 1
        else:
            await update.message.reply_text("‚ùó –í–æ–ø—Ä–æ—Å —É–∂–µ –ø–µ—Ä–µ–≤–µ–¥—ë–Ω." if lang == "ru" else "‚ùó Question already translated.")
        return

    # üá∑üá∫ –ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–≤–µ—Ç–∞
    if msg == btn_a_trans:
        q = data.get("last_question")
        if not q:
            await update.message.reply_text("‚ùó –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å." if lang == "ru" else "‚ùó Please select a question first.")
            return
        if data["answer_display_count"] == 0:
            await update.message.reply_text("‚ùó –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–≤–µ—Ç." if lang == "ru" else "‚ùó Please display the main answer first.")
            return
        if data["a_translate_count"] == 0:
            await update.message.reply_text(f"üá∑üá∫ {q['answer_ru']}")
            data["a_translate_count"] = 1
        else:
            await update.message.reply_text("‚ùó –û—Ç–≤–µ—Ç —É–∂–µ –ø–µ—Ä–µ–≤–µ–¥—ë–Ω." if lang == "ru" else "‚ùó Answer already translated.")
        return

    await update.message.reply_text("‚ùì –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é." if lang == "ru" else "‚ùì Please use the menu buttons.")
