import json
import random
import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
from config import QUESTIONS_FILE
from keyboards import get_main_keyboard
from utils.tts import generate_voice

# –ó–∞–≥—Ä—É–∑–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
try:
    with open(QUESTIONS_FILE, encoding="utf-8") as f:
        QUESTIONS = json.load(f)
except Exception as e:
    logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")
    QUESTIONS = []

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

def get_user_data(user_id):
    if user_id not in user_data:
        user_data[user_id] = {
            "easy_done": [],
            "hard_done": [],
            "last_question": None,
            "language": "en",
            "auto_repeat": False,
            # –°—á—ë—Ç—á–∏–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:
            "answer_display_count": 0,   # –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û—Ç–≤–µ—Ç"
            "q_translate_count": 0,      # –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–µ—Ä–µ–≤–æ–¥ –≤–æ–ø—Ä–æ—Å–∞"
            "a_translate_count": 0,      # –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–≤–µ—Ç–∞"
        }
    return user_data[user_id]

async def handle_user_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    msg = update.message.text.strip().lower()  # –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –∏ —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    logging.info(f"[DEBUG] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: '{msg}'")
    
    data = get_user_data(user_id)
    lang = context.user_data.get("language", data.get("language", "en"))
    level = context.user_data.get("level", "easy")
    data["language"] = lang
    context.user_data["language"] = lang

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —è–∑—ã–∫–∞
    btn_next    = ("‚úàÔ∏è —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å" if lang == "ru" else "‚úàÔ∏è next question")
    btn_answer  = ("üí¨ –æ—Ç–≤–µ—Ç" if lang == "ru" else "üí¨ answer")
    btn_q_trans = ("üåç –ø–µ—Ä–µ–≤–æ–¥ –≤–æ–ø—Ä–æ—Å–∞" if lang == "ru" else "üåç translate question")
    btn_a_trans = ("üá∑üá∫ –ø–µ—Ä–µ–≤–æ–¥ –æ—Ç–≤–µ—Ç–∞" if lang == "ru" else "üá∑üá∫ translate answer")
    btn_support = ("üí≥ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç" if lang == "ru" else "üí≥ support project")

    logging.info(f"[DEBUG] –û–∂–∏–¥–∞–µ–º—ã–µ –∫–Ω–æ–ø–∫–∏: btn_next='{btn_next}', btn_answer='{btn_answer}', btn_q_trans='{btn_q_trans}', btn_a_trans='{btn_a_trans}', btn_support='{btn_support}'")

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç" ---
    if msg == btn_support:
        support_text = ("üí≥ –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç –∑–¥–µ—Å—å:\nhttps://www.sberbank.com/sms/pbpn?requisiteNumber=79155691550" 
                        if lang == "ru" 
                        else "üí≥ You can support the project here:\nhttps://www.sberbank.com/sms/pbpn?requisiteNumber=79155691550")
        await update.message.reply_text(support_text)
        return

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å" ---
    if msg == btn_next:
        available = [q for q in QUESTIONS if q["level"] == level and q["id"] not in data[f"{level}_done"]]
        if not available:
            if level == "easy":
                if lang == "ru":
                    keyboard = InlineKeyboardMarkup([
                        [InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–æ–∂–Ω—ã–º", callback_data="switch_to_hard"),
                         InlineKeyboardButton("–ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞", callback_data="reset_progress")]
                    ])
                    prompt = "‚úÖ –í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤—Å–µ –ø—Ä–æ—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã. –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?"
                else:
                    keyboard = InlineKeyboardMarkup([
                        [InlineKeyboardButton("Switch to hard", callback_data="switch_to_hard"),
                         InlineKeyboardButton("Start over", callback_data="reset_progress")]
                    ])
                    prompt = "‚úÖ All easy questions done. Choose next step:"
                await update.message.reply_text(prompt, reply_markup=keyboard)
            else:
                if lang == "ru":
                    keyboard = InlineKeyboardMarkup([
                        [InlineKeyboardButton("–ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞", callback_data="reset_progress")]
                    ])
                    prompt = "‚úÖ –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã. –•–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞?"
                else:
                    keyboard = InlineKeyboardMarkup([
                        [InlineKeyboardButton("Start over", callback_data="reset_progress")]
                    ])
                    prompt = "‚úÖ All questions completed. Start over?"
                await update.message.reply_text(prompt, reply_markup=keyboard)
            return

        question = random.choice(available)
        data[f"{level}_done"].append(question["id"])
        data["last_question"] = question

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Å—á—ë—Ç—á–∏–∫–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        data["answer_display_count"] = 0
        data["q_translate_count"] = 0
        data["a_translate_count"] = 0

        await update.message.reply_text(f"üìù {question['question_en']}")
        voice = generate_voice(question['question_en'])
        if voice:
            await update.message.reply_voice(voice)
        return

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Ç–≤–µ—Ç" ---
    if msg == btn_answer:
        q = data.get("last_question")
        if not q:
            await update.message.reply_text("‚ùó –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å." if lang == "ru" else "‚ùó Please select a question first.")
            return
        answer_count = data.get("answer_display_count", 0)
        if answer_count == 0:
            await update.message.reply_text(f"‚úÖ {q['answer_en']}")
            voice = generate_voice(q['answer_en'])
            if voice:
                await update.message.reply_voice(voice)
            data["answer_display_count"] = 1
        elif answer_count == 1:
            await update.message.reply_text("‚ùó –û—Ç–≤–µ—Ç —É–∂–µ –≤—ã–≤–µ–¥–µ–Ω" if lang == "ru" else "‚ùó Answer already displayed")
            data["answer_display_count"] = 2
        else:
            return
        return

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–µ—Ä–µ–≤–æ–¥ –≤–æ–ø—Ä–æ—Å–∞" ---
    if msg == btn_q_trans:
        q = data.get("last_question")
        if not q:
            await update.message.reply_text("‚ùó –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å." if lang == "ru" else "‚ùó Please select a question first.")
            return
        q_trans_count = data.get("q_translate_count", 0)
        if q_trans_count == 0:
            await update.message.reply_text(f"üåç {q['question_ru']}")
            data["q_translate_count"] = 1
        elif q_trans_count == 1:
            await update.message.reply_text("‚ùó –í–æ–ø—Ä–æ—Å —É–∂–µ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω" if lang == "ru" else "‚ùó Question already translated")
            data["q_translate_count"] = 2
        else:
            return
        return

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–≤–µ—Ç–∞" ---
    if msg == btn_a_trans:
        q = data.get("last_question")
        if not q:
            await update.message.reply_text("‚ùó –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å." if lang == "ru" else "‚ùó Please select a question first.")
            return
        if data.get("answer_display_count", 0) == 0:
            await update.message.reply_text("‚ùó –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–≤–µ—Ç" if lang == "ru" else "‚ùó Please display the main answer first")
            return
        a_trans_count = data.get("a_translate_count", 0)
        if a_trans_count == 0:
            await update.message.reply_text(f"üá∑üá∫ {q['answer_ru']}")
            data["a_translate_count"] = 1
        elif a_trans_count == 1:
            await update.message.reply_text("‚ùó –û—Ç–≤–µ—Ç —É–∂–µ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω" if lang == "ru" else "‚ùó Answer already translated")
            data["a_translate_count"] = 2
        else:
            return
        return

    await update.message.reply_text("‚ùì –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é." if lang == "ru" else "‚ùì Please use the menu buttons.")
