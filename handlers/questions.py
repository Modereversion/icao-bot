import json
import random
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
from config import QUESTIONS_FILE
from utils.tts import generate_voice

# –ó–∞–≥—Ä—É–∑–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
with open(QUESTIONS_FILE, encoding="utf-8") as f:
    QUESTIONS = json.load(f)

user_data = {}

def get_user_data(user_id):
    if user_id not in user_data:
        user_data[user_id] = {
            "language": "en",
            "level": "easy",
            "done_ids": [],
            "postponed": [],
            "last_question": None,
            "last_msg_id": None,
            "last_voice_id": None,
            "last_display": "question"
        }
    return user_data[user_id]

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
async def handle_user_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    lang_code = update.effective_user.language_code or "en"
    lang = "ru" if lang_code.startswith("ru") else "en"
    context.user_data["language"] = lang
    data = get_user_data(user_id)

    # –û—á–∏—Å—Ç–∫–∞ –∏ —Å–±—Ä–æ—Å
    data.update({
        "done_ids": [],
        "postponed": [],
        "last_question": None,
        "last_msg_id": None,
        "last_voice_id": None,
        "last_display": "question"
    })

    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Level 4 Trainer ‚Äì —Ç–≤–æ–π —Ç—Ä–µ–Ω–∞–∂—ë—Ä –∫ —ç–∫–∑–∞–º–µ–Ω—É –ò–ö–ê–û!\n\n"
        "–ù–∞–∂–º–∏ ¬´üöÄ –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É¬ª, —á—Ç–æ–±—ã –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –ø–µ—Ä–≤–æ–º—É –≤–æ–ø—Ä–æ—Å—É."
        if lang == "ru" else
        "üëã Welcome to Level 4 Trainer ‚Äì your ICAO speaking exam trainer!\n\n"
        "Press ¬´üöÄ Start training¬ª to begin."
    )

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É" if lang == "ru" else "üöÄ Start training", callback_data="start_training")]
    ])

    await update.message.reply_text(text, reply_markup=keyboard)

# –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
async def send_new_question(update, context, user_id, lang):
    data = get_user_data(user_id)

    # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–π –æ–∑–≤—É—á–∫–∏ –∏ –∫–Ω–æ–ø–æ–∫
    try:
        if data.get("last_voice_id"):
            await context.bot.delete_message(chat_id=user_id, message_id=data["last_voice_id"])
        if data.get("last_msg_id"):
            await context.bot.edit_message_reply_markup(chat_id=user_id, message_id=data["last_msg_id"], reply_markup=None)
    except:
        pass

    level = data.get("level", "easy")
    available = [q for q in QUESTIONS if q["level"] == level and q["id"] not in data["done_ids"]]

    if not available and data["postponed"]:
        available = data["postponed"]
        data["postponed"] = []

    if not available:
        await update.callback_query.message.reply_text("‚úÖ –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!" if lang == "ru" else "‚úÖ All questions completed!")
        return

    question = random.choice(available)
    if question not in data["postponed"]:
        data["done_ids"].append(question["id"])

    data["last_question"] = question
    data["last_display"] = "question"

    text = f"üìù {question['question_en']}"
    keyboard = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚úàÔ∏è –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å" if lang == "ru" else "‚úàÔ∏è Next", callback_data="next_question"),
            InlineKeyboardButton("üí¨ –û—Ç–≤–µ—Ç" if lang == "ru" else "üí¨ Answer", callback_data="show_answer")
        ],
        [
            InlineKeyboardButton("üåç –ü–µ—Ä–µ–≤–æ–¥ –≤–æ–ø—Ä–æ—Å–∞" if lang == "ru" else "üåç Translate Q", callback_data="translate_q"),
            InlineKeyboardButton("üá∑üá∫ –ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–≤–µ—Ç–∞" if lang == "ru" else "üá∑üá∫ Translate A", callback_data="translate_a")
        ],
        [
            InlineKeyboardButton("üîÅ –û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–∑–∂–µ" if lang == "ru" else "üîÅ Answer later", callback_data="postpone")
        ]
    ])

    sent = await update.callback_query.message.reply_text(text, reply_markup=keyboard)
    voice = generate_voice(question["question_en"])
    if voice:
        voice_msg = await update.callback_query.message.reply_voice(voice)
        data["last_voice_id"] = voice_msg.message_id
    data["last_msg_id"] = sent.message_id

# Inline-–∫–Ω–æ–ø–∫–∏
async def handle_inline_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    lang = context.user_data.get("language", "en")
    data = get_user_data(user_id)
    await query.answer()

    code = query.data
    q = data.get("last_question")
    msg = query.message

    # –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É / –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    if code == "start_training" or code == "next_question":
        await send_new_question(update, context, user_id, lang)
        return

    if not q:
        await msg.reply_text("‚ùó –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å." if lang == "ru" else "‚ùó Please select a question first.")
        return

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ
    try:
        if data.get("last_voice_id"):
            await context.bot.delete_message(chat_id=user_id, message_id=data["last_voice_id"])
    except:
        pass

    if code == "show_answer":
        if data["last_display"] == "answer":
            return
        text = f"üí¨ {q['answer_en']}"
        voice = generate_voice(q['answer_en'])
        await msg.edit_text(text, reply_markup=msg.reply_markup)
        if voice:
            voice_msg = await msg.reply_voice(voice)
            data["last_voice_id"] = voice_msg.message_id
        data["last_display"] = "answer"

    elif code == "translate_q":
        if data["last_display"] == "q_trans":
            return
        text = f"üåç {q['question_ru']}"
        voice = generate_voice(q["question_en"])
        await msg.edit_text(text, reply_markup=msg.reply_markup)
        if voice:
            voice_msg = await msg.reply_voice(voice)
            data["last_voice_id"] = voice_msg.message_id
        data["last_display"] = "q_trans"

    elif code == "translate_a":
        if data["last_display"] == "a_trans":
            return
        if data["last_display"] != "answer":
            await msg.reply_text("‚ùó –°–Ω–∞—á–∞–ª–∞ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç." if lang == "ru" else "‚ùó Please view the answer first.")
            return
        text = f"üá∑üá∫ {q['answer_ru']}"
        voice = generate_voice(q["answer_en"])
        await msg.edit_text(text, reply_markup=msg.reply_markup)
        if voice:
            voice_msg = await msg.reply_voice(voice)
            data["last_voice_id"] = voice_msg.message_id
        data["last_display"] = "a_trans"

    elif code == "postpone":
        if q not in data["postponed"]:
            data["postponed"].append(q)
        await msg.reply_text("üìå –í–æ–ø—Ä–æ—Å –æ—Ç–ª–æ–∂–µ–Ω. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É!" if lang == "ru" else "üìå Question saved for later. Moving on!")
        await send_new_question(update, context, user_id, lang)
