import json
import random
import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
from config import QUESTIONS_FILE
from keyboards import get_main_keyboard
from utils.tts import generate_voice

try:
    with open(QUESTIONS_FILE, encoding="utf-8") as f:
        QUESTIONS = json.load(f)
except Exception as e:
    logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")
    QUESTIONS = []

user_data = {}

def get_user_data(user_id):
    if user_id not in user_data:
        user_data[user_id] = {
            "easy_done": [],
            "hard_done": [],
            "last_question": None,
            "language": "en",
            "auto_repeat": False,
            "answer_display_count": 0,
            "q_translate_count": 0,
            "a_translate_count": 0,
            "level": "easy"
        }
    return user_data[user_id]

async def handle_user_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    msg = update.message.text.strip().lower()
    logging.info(f"[DEBUG] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: '{msg}'")

    user_id = update.effective_user.id
    data = get_user_data(user_id)
    lang = data.get("language", "en")
    level = data.get("level", "easy")

    btn_next    = "‚úàÔ∏è —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å" if lang == "ru" else "‚úàÔ∏è next question"
    btn_answer  = "üí¨ –æ—Ç–≤–µ—Ç" if lang == "ru" else "üí¨ answer"
    btn_q_trans = "üåç –ø–µ—Ä–µ–≤–æ–¥ –≤–æ–ø—Ä–æ—Å–∞" if lang == "ru" else "üåç translate question"
    btn_a_trans = "üá∑üá∫ –ø–µ—Ä–µ–≤–æ–¥ –æ—Ç–≤–µ—Ç–∞" if lang == "ru" else "üá∑üá∫ translate answer"
    btn_support = "üí≥ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç" if lang == "ru" else "üí≥ support project"

    logging.info(f"[DEBUG] –û–∂–∏–¥–∞–µ–º—ã–µ –∫–Ω–æ–ø–∫–∏: next='{btn_next}', answer='{btn_answer}', qtrans='{btn_q_trans}', atrans='{btn_a_trans}', support='{btn_support}'")

    # –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç
    if btn_support in msg:
        text_support = (
            "üí≥ –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç –∑–¥–µ—Å—å:\nhttps://www.sberbank.com/sms/pbpn?requisiteNumber=79155691550"
            if lang == "ru"
            else
            "üí≥ You can support the project here:\nhttps://www.sberbank.com/sms/pbpn?requisiteNumber=79155691550"
        )
        await update.message.reply_text(text_support)
        return

    # –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    if btn_next in msg:
        available = [q for q in QUESTIONS if q["level"] == level and q["id"] not in data[f"{level}_done"]]
        if not available:
            if level == "easy":
                # –ü—Ä–µ–¥—ã–¥—É—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç, –±–µ–∑ ¬´–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–æ–∂–Ω—ã–º¬ª
                if lang == "ru":
                    prompt = "‚úÖ –í—Å–µ –ª—ë–≥–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ–π–¥–µ–Ω—ã. –•–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞?"
                else:
                    prompt = "‚úÖ All easy questions completed. Do you want to start over?"
                await update.message.reply_text(prompt)
            else:
                # –ö–æ–≥–¥–∞ —Å–ª–æ–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, —Ç–æ–∂–µ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —á—Ç–æ-—Ç–æ
                if lang == "ru":
                    prompt = "‚úÖ –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ–π–¥–µ–Ω—ã. –ù–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ?"
                else:
                    prompt = "‚úÖ All questions done. Restart?"
                await update.message.reply_text(prompt)
            return

        question = random.choice(available)
        data[f"{level}_done"].append(question["id"])
        data["last_question"] = question
        data["answer_display_count"] = 0
        data["q_translate_count"] = 0
        data["a_translate_count"] = 0

        await update.message.reply_text(f"üìù {question['question_en']}")
        voice = generate_voice(question['question_en'])
        if voice:
            await update.message.reply_voice(voice)
        return

    # –û—Ç–≤–µ—Ç
    if btn_answer in msg:
        q = data.get("last_question")
        if not q:
            await update.message.reply_text("‚ùó –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å." if lang == "ru" else "‚ùó Please select a question first.")
            return
        count = data["answer_display_count"]
        if count == 0:
            await update.message.reply_text(f"‚úÖ {q['answer_en']}")
            voice = generate_voice(q['answer_en'])
            if voice:
                await update.message.reply_voice(voice)
            data["answer_display_count"] = 1
        elif count == 1:
            await update.message.reply_text("‚ùó –û—Ç–≤–µ—Ç —É–∂–µ –≤—ã–≤–µ–¥–µ–Ω" if lang == "ru" else "‚ùó Answer already displayed")
            data["answer_display_count"] = 2
        else:
            return
        return

    # –ü–µ—Ä–µ–≤–æ–¥ –≤–æ–ø—Ä–æ—Å–∞
    if btn_q_trans in msg:
        q = data.get("last_question")
        if not q:
            await update.message.reply_text("‚ùó –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å." if lang == "ru" else "‚ùó Please select a question first.")
            return
        q_count = data["q_translate_count"]
        if q_count == 0:
            await update.message.reply_text(f"üåç {q['question_ru']}")
            data["q_translate_count"] = 1
        elif q_count == 1:
            await update.message.reply_text("‚ùó –í–æ–ø—Ä–æ—Å —É–∂–µ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω" if lang == "ru" else "‚ùó Question already translated")
            data["q_translate_count"] = 2
        else:
            return
        return

    # –ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–≤–µ—Ç–∞
    if btn_a_trans in msg:
        q = data.get("last_question")
        if not q:
            await update.message.reply_text("‚ùó –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å." if lang == "ru" else "‚ùó Please select a question first.")
            return
        if data["answer_display_count"] == 0:
            await update.message.reply_text("‚ùó –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–≤–µ—Ç" if lang == "ru" else "‚ùó Please display the main answer first")
            return
        a_count = data["a_translate_count"]
        if a_count == 0:
            await update.message.reply_text(f"üá∑üá∫ {q['answer_ru']}")
            data["a_translate_count"] = 1
        elif a_count == 1:
            await update.message.reply_text("‚ùó –û—Ç–≤–µ—Ç —É–∂–µ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω" if lang == "ru" else "‚ùó Answer already translated")
            data["a_translate_count"] = 2
        else:
            return
        return

    # –ò–Ω–∞—á–µ
    await update.message.reply_text(
        "‚ùì –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é." if lang == "ru" else "‚ùì Please use the menu buttons."
    )
