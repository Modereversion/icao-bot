from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes, MessageHandler, CommandHandler, CallbackQueryHandler, filters
from config import ADMIN_ID
from handlers.questions import user_data  # –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
from handlers.feedback import feedback_list

# –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
BLOCKED_USERS = set()

async def management_menu_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    lang = context.user_data.get("language", "en")
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–∑—ã–≤–∞—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äì –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    if user_id != ADMIN_ID:
        return
    # –§–æ—Ä–º–∏—Ä—É–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–ø—Ü–∏—è–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –º–µ–Ω—é
    if lang == "ru":
        buttons = [
            [InlineKeyboardButton("–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="admin_view_stats")],
            [InlineKeyboardButton("–ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_full_stats")],
            [InlineKeyboardButton("–û—Ç–∑—ã–≤—ã", callback_data="admin_view_feedbacks")],
            [InlineKeyboardButton("–û—á–∏—Å—Ç–∏—Ç—å –æ—Ç–∑—ã–≤—ã", callback_data="admin_clear_feedbacks")],
            [InlineKeyboardButton("–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_block_user")]
        ]
    else:
        buttons = [
            [InlineKeyboardButton("View stats", callback_data="admin_view_stats")],
            [InlineKeyboardButton("Full stats", callback_data="admin_full_stats")],
            [InlineKeyboardButton("Feedbacks", callback_data="admin_view_feedbacks")],
            [InlineKeyboardButton("Clear feedbacks", callback_data="admin_clear_feedbacks")],
            [InlineKeyboardButton("Block user", callback_data="admin_block_user")]
        ]
    keyboard = InlineKeyboardMarkup(buttons)
    await update.message.reply_text("üõ†Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:" if lang == "ru" else "üõ†Ô∏è Admin panel:", reply_markup=keyboard)

async def admin_management_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    lang = context.user_data.get("language", "en")
    
    if query.data == "admin_view_stats":
        total_users = len(user_data)
        text = f"üìà –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}" if lang == "ru" else f"üìà Total users: {total_users}"
        await query.edit_message_text(text)
    elif query.data == "admin_full_stats":
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã–≤–æ–¥–∏–º: id, first_name, last_name, username, country (–≤ –Ω–∞—à–µ–º —Å–ª—É—á–∞–µ language_code),
        # –¥–∞—Ç—É –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ (–µ—Å–ª–∏ —Ç–∞–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω—è–ª–∞—Å—å)
        if not user_data:
            text = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º" if lang == "ru" else "No user data available"
        else:
            lines = []
            for uid, data in user_data.items():
                # –ï—Å–ª–∏ —Ç–∞–∫–∏—Ö –∫–ª—é—á–µ–π –Ω–µ—Ç, –≤—ã–≤–æ–¥–∏–º "-"
                first_name = data.get("first_name", "-")
                last_name = data.get("last_name", "-")
                username = data.get("username", "-")
                country = data.get("country", "-")
                first_launch = data.get("first_launch", "-")
                line = f"ID: {uid} | {first_name} {last_name} (@{username}) | {country} | {first_launch}"
                lines.append(line)
            text = "\n".join(lines)
        await query.edit_message_text(text if text else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö" if lang == "ru" else "No data")
    elif query.data == "admin_view_feedbacks":
        if not feedback_list:
            text = "–ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤" if lang == "ru" else "No feedbacks"
        else:
            text = "\n\n".join(feedback_list)
        await query.edit_message_text(text)
    elif query.data == "admin_clear_feedbacks":
        feedback_list.clear()
        text = "–û—Ç–∑—ã–≤—ã –æ—á–∏—â–µ–Ω—ã" if lang == "ru" else "Feedbacks cleared"
        await query.edit_message_text(text)
    elif query.data == "admin_block_user":
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∞–¥–º–∏–Ω–∞ –≤ —Ä–µ–∂–∏–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        context.user_data["block_mode"] = True
        prompt = "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:" if lang == "ru" else "Enter user ID to block:"
        await query.edit_message_text(prompt)

def get_admin_handlers():
    return [
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ" / "Management"
        MessageHandler(filters.Regex("^(–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ|Management)$"), management_menu_command),
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline callback –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –º–µ–Ω—é
        CallbackQueryHandler(admin_management_callback, pattern="^admin_.*")
    ]

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Ä–µ–∂–∏–º–µ block_mode)
async def admin_block_user_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ —Ä–µ–∂–∏–º–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏ —á—Ç–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    user_id = update.effective_user.id
    if user_id != ADMIN_ID or not context.user_data.get("block_mode"):
        return
    text = update.message.text.strip()
    try:
        block_id = int(text)
        BLOCKED_USERS.add(block_id)
        context.user_data["block_mode"] = False
        await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {block_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" if context.user_data.get("language", "en")=="ru" else f"User with ID {block_id} blocked")
    except ValueError:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:" if context.user_data.get("language", "en")=="ru" else "Invalid ID. Please try again:")

def get_admin_block_handlers():
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ ID –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
    return [
        MessageHandler(filters.TEXT, admin_block_user_input)
    ]
